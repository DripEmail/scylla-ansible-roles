---
- name: configure RAID via Scylla-setup
  shell:
    scylla_raid_setup --disks "{{ scylla_raid_disks | join(',') }}"
  become: true
  when: scylla_raid_setup is defined and scylla_raid_setup|length > 0

- name: IO settings probe
  block:
    - name: check for existing io_properties
      stat:
        path: /etc/scylla.d/io_properties.yaml
      register: io_prop_stat

    - name: Measure IO settings on one node
      shell: |
        scylla_io_setup
      when: io_prop_stat.stat.exists|bool == False

    - name: store /etc/scylla.d/io_properties.yaml
      shell: |
        cat /etc/scylla.d/io_properties.yaml
      register: _io_properties

    - set_fact:
        io_properties: "{{ _io_properties.stdout }}"

    - name: store /etc/scylla.d/io.conf
      shell: |
        cat /etc/scylla.d/io.conf
      register: _io_conf

    - set_fact:
        io_conf: "{{ _io_conf.stdout_lines[0] }}"
  when: scylla_io_probe|bool == True
  run_once: true
  become: true

- name: Set io.conf
  lineinfile:
    path: /etc/scylla.d/io.conf
    regexp: '^SEASTAR_IO='
    line: "{{ io_conf }}"
    create: yes
  become: true

- name: Set io_properties
  template:
    src: templates/io_properties.yaml.j2
    dest: /etc/scylla.d/io_properties.yaml
    owner: root
    group: root
    mode: '0644'
  become: true

- name: configure NTP
  shell: |
    scylla_ntp_setup
  become: true

- name: node exporter setup
  shell: |
    node_exporter_install --force
  when: install_type == 'online'
  become: true
  notify:
    - node_exporter start
  ignore_errors: true
  #TODO: stop ignoring errors when the node_exporter_install script fix is available in all actual versions

- name: Populate service facts
  service_facts:
  # example output:
  #   "ansible_facts.services": {
  #     "scylla-server.service": {
  #         "name": "scylla-server.service",
  #         "source": "systemd",
  #         "state": "running",
  #         "status": "enabled"
  #     }
  #  }

- name: configure Scylla
  shell: |
    scylla_setup --no-raid-setup --nic "{{ scylla_nic }}" --setup-nic-and-disks --no-ec2-check --no-kernel-check --no-ntp-setup --no-io-setup --no-node-exporter
  become: true
  when: ansible_facts.services["scylla-server.service"] is defined and ansible_facts.services["scylla-server.service"]["state"] != "running"

- name: configure scylla.yaml
  template:
    src: templates/scylla.yaml.j2
    dest: /etc/scylla/scylla.yaml
    owner: root
    group: root
    mode: '0644'
  become: true

- name: configure cassandra-rackdc.properties
  template:
    src: templates/cassandra-rackdc.properties.j2
    dest: /etc/scylla/cassandra-rackdc.properties
    owner: root
    group: root
    mode: '0644'
  become: true
  when: scylla_snitch != 'SimpleSnitch'

- name: finalize Scylla node configuration
  block:
  - name: run bootparam setup
    shell: |
      scylla_bootparam_setup

  - name: set up coredump
    shell: |
      scylla_coredump_setup --dump-to-raiddir

  - name: configure cpu scaling
    shell: |
      scylla_cpuscaling_setup

  - name: configure fstrim
    shell: |
      scylla_fstrim_setup

  - name: configure sysconfig
    shell: |
      scylla_sysconfig_setup --setup-nic-and-disks --nic {{ scylla_nic }}

  - name: configure selinux
    shell: |
      scylla_selinux_setup
  become: true

- name: start scylla seeds
  service:
    name: scylla-server
    state: started
  become: true
  when: vars['ansible_'~scylla_nic].ipv4.address in scylla_seeds

- name: start scylla non-seeds
  service:
    name: scylla-server
    state: started
  become: true
  when: vars['ansible_'~scylla_nic].ipv4.address not in scylla_seeds

- name: generate monitoring configuration
  block:
  - name: wait for the API port to come up on all nodes
    wait_for:
      port: "{{ scylla_api_port }}"
      host: "{{ scylla_api_address }}"
      timeout: 300

  - name: wait for the cluster to become healthy
    shell: |
      nodetool status|grep -E '^UN|$UJ|^DN'|wc -l
    register: node_count
    until: node_count.stdout|int == ansible_play_batch|length
    retries: 300
    delay: 1

  - name: generate scylla_servers.yml for monitoring
    block:
    - name: generate scylla_servers.yml for monitoring
      script: files/minigenconfig.py --cluster-name {{ scylla_cluster_name }} --api-string http://{{ scylla_api_address }}:{{ scylla_api_port }}
      register: genconfig

    - name: store output in a file
      copy:
        content: "{{ genconfig.stdout }}"
        dest: "scylla_servers.yml"
      delegate_to: localhost
    run_once: true
    when: generate_monitoring_config|bool == true

- name: configure the Manager agents
  block:
    - name: generate the agent key
      shell: |
        tr -dc 'a-zA-Z0-9' < /dev/urandom | fold -w 128 | head -n 1
      register: scyllamgr_auth_token
      delegate_to: localhost
      run_once: true

    - name: store the auth token in a local file for later use
      copy:
        content: |
          {{ scyllamgr_auth_token.stdout }}
        dest: scyllamgr_auth_token.txt
      delegate_to: localhost
      run_once: true

    - name: run scyllamgr_agent_setup
      shell: |
        scyllamgr_agent_setup -y

    - name: add the auth token to agent configuration
      lineinfile:
        path: /etc/scylla-manager-agent/scylla-manager-agent.yaml
        regexp: '^auth_token:'
        line: 'auth_token: {{ scyllamgr_auth_token.stdout }}'

    - name: insert additional configuration options for the manager agent
      blockinfile:
        path: /etc/scylla-manager-agent/scylla-manager-agent.yaml
        block: "{{ scylla_manager_agent_config }}"
        insertafter: EOF
      when: scylla_manager_agent_config is defined

    - name: start and enable the Manager agent service
      service:
        name: scylla-manager-agent
        state: started
        enabled: yes
  when: scylla_manager_enabled|bool == true
  become: true

